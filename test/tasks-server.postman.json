{
	"info": {
		"_postman_id": "06a31c43-1504-482c-a041-13342945a83f",
		"name": "tasks-server",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/users",
			"item": [
				{
					"name": "GET all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is an array\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an(\"array\");\r",
									"\r",
									"    pm.collectionVariables.set(\"initArrayLen\", response.length);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{usersURL}}",
							"host": [
								"{{usersURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST a new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response has all properties\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.eql(\"new user\");\r",
									"    pm.expect(response.pass).to.eql(\"218218\");\r",
									"    pm.expect(response.projectIds).to.eql([]);\r",
									"    pm.expect(response.taskIds).to.eql([]);\r",
									"    \r",
									"    pm.collectionVariables.set(\"userId\", response._id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"new user\",\r\n    \"pass\": \"218218\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{usersURL}}",
							"host": [
								"{{usersURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is an array with 1 more element\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an(\"array\");\r",
									"    \r",
									"    const initLength = pm.collectionVariables.get(\"initArrayLen\");\r",
									"    pm.expect(response.length).to.be.eql(initLength + 1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{usersURL}}",
							"host": [
								"{{usersURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET an user given id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response has all properties in right format\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.be.a(\"string\");\r",
									"    pm.expect(response.pass).to.be.a(\"string\");\r",
									"    pm.expect(response.DOB).to.be.a(\"string\");\r",
									"    pm.expect(response.projectIds).to.be.an(\"array\");\r",
									"    pm.expect(response.taskIds).to.be.an(\"array\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{usersURL}}/:id",
							"host": [
								"{{usersURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NOT GET user given incorrect id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{usersURL}}/:id",
							"host": [
								"{{usersURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{incorrectId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT to an user given id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response has new properties\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.eql(\"user updated\");\r",
									"    pm.expect(response.pass).to.eql(\"13579\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"user updated\",\r\n    \"pass\": \"13579\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{usersURL}}/:id",
							"host": [
								"{{usersURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NOT PUT user given incorrect id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"user updated\",\r\n    \"pass\": \"13579\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{usersURL}}/:id",
							"host": [
								"{{usersURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{incorrectId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NOT PUT to user if projectIds change",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"user updated\",\r\n    \"pass\": \"13579\",\r\n    \"projectIds\": [\"abdcdnjnjds\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{usersURL}}/:id",
							"host": [
								"{{usersURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE user given id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{usersURL}}/:id",
							"host": [
								"{{usersURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NOT GET deleted user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{usersURL}}/:id",
							"host": [
								"{{usersURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/users/:id/projects",
			"item": [
				{
					"name": "POST a new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response has all properties\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.eql(\"new user\");\r",
									"    pm.expect(response.pass).to.eql(\"218218\");\r",
									"    pm.expect(response.projectIds).to.eql([]);\r",
									"    pm.expect(response.taskIds).to.eql([]);\r",
									"    \r",
									"    pm.collectionVariables.set(\"userId\", response._id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"new user\",\r\n    \"pass\": \"218218\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{usersURL}}",
							"host": [
								"{{usersURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST test project0 incomplete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response has all project properties\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.be.eql(\"Creating Gant charts\");\r",
									"    pm.expect(response.content).to.be.eql(\"Creating Gant charts to provide visualizations of work progress\");\r",
									"    pm.expect(response.dayStart).to.be.a(\"string\");\r",
									"    pm.expect(response.budget).to.be.a(\"number\");\r",
									"    pm.expect(response.completed).to.be.a(\"boolean\");\r",
									"    pm.expect(response.users).to.be.an(\"array\");\r",
									"    pm.expect(response.taskIds).to.be.an(\"array\");\r",
									"    \r",
									"    pm.collectionVariables.set(\"projectId0\", response._id);\r",
									"});\r",
									"\r",
									"pm.test(\"The response have the user\", function() {\r",
									"    pm.expect(pm.response.json().users.length).to.be.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Creating Gant charts\",\r\n    \"content\": \"Creating Gant charts to provide visualizations of work progress\",\r\n    \"users\": [ { \"userId\": \"{{userId}}\", \"roles\": [\"developer\"] } ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{projectsURL}}",
							"host": [
								"{{projectsURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST test project1 completed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response has all project properties\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.be.eql(\"Creating Gant charts\");\r",
									"    pm.expect(response.content).to.be.eql(\"Creating Gant charts to provide visualizations of work progress\");\r",
									"    pm.expect(response.dayStart).to.be.a(\"string\");\r",
									"    pm.expect(response.budget).to.be.a(\"number\");\r",
									"    pm.expect(response.completed).to.be.a(\"boolean\");\r",
									"    pm.expect(response.users).to.be.an(\"array\");\r",
									"    pm.expect(response.taskIds).to.be.an(\"array\");\r",
									"    \r",
									"    pm.collectionVariables.set(\"projectId1\", response._id);\r",
									"});\r",
									"\r",
									"pm.test(\"The response have the user\", function() {\r",
									"    pm.expect(pm.response.json().users.length).to.be.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Creating Gant charts\",\r\n    \"content\": \"Creating Gant charts to provide visualizations of work progress\",\r\n    \"users\": [ { \"userId\": \"{{userId}}\", \"roles\": [\"tester\"] } ],\r\n    \"completed\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{projectsURL}}",
							"host": [
								"{{projectsURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /users/:id/projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is an array with 2 elements\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an(\"array\");    \r",
									"    pm.expect(response.length).to.be.eql(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{usersURL}}/:id/projects",
							"host": [
								"{{usersURL}}"
							],
							"path": [
								":id",
								"projects"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET user completed projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is an array with 1 element\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an(\"array\");\r",
									"    pm.expect(response.length).to.be.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"The response have the correct completed project\", function() {\r",
									"    const completedProj = pm.collectionVariables.get(\"projectId1\");\r",
									"    pm.expect(pm.response.json()).to.include(completedProj);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{usersURL}}/:id/projects/completed",
							"host": [
								"{{usersURL}}"
							],
							"path": [
								":id",
								"projects",
								"completed"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET user incomplete projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is an array with 1 element\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an(\"array\");    \r",
									"    pm.expect(response.length).to.be.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"The response have the correct incomplete project\", function() {\r",
									"    const incompleteProj = pm.collectionVariables.get(\"projectId0\");\r",
									"    pm.expect(pm.response.json()).to.include(incompleteProj);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{usersURL}}/:id/projects/incomplete",
							"host": [
								"{{usersURL}}"
							],
							"path": [
								":id",
								"projects",
								"incomplete"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE test project0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{projectsURL}}/:id",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE test project1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{projectsURL}}/:id",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{usersURL}}/:id",
							"host": [
								"{{usersURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/users/:id/tasks",
			"item": [
				{
					"name": "POST test user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response has all properties\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.eql(\"new user\");\r",
									"    pm.expect(response.pass).to.eql(\"218218\");\r",
									"    pm.expect(response.projectIds).to.eql([]);\r",
									"    pm.expect(response.taskIds).to.eql([]);\r",
									"    \r",
									"    pm.collectionVariables.set(\"userId\", response._id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"new user\",\r\n    \"pass\": \"218218\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{usersURL}}",
							"host": [
								"{{usersURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST test project with user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response has all project properties\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.be.eql(\"Creating Gant charts\");\r",
									"    pm.expect(response.content).to.be.eql(\"Creating Gant charts to provide visualizations of work progress\");\r",
									"    pm.expect(response.dayStart).to.be.a(\"string\");\r",
									"    pm.expect(response.budget).to.be.a(\"number\");\r",
									"    pm.expect(response.completed).to.be.a(\"boolean\");\r",
									"    pm.expect(response.users).to.be.an(\"array\");\r",
									"    pm.expect(response.taskIds).to.be.an(\"array\");\r",
									"    \r",
									"    pm.collectionVariables.set(\"projectId\", response._id);\r",
									"});\r",
									"\r",
									"pm.test(\"The response have the user\", function() {\r",
									"    pm.expect(pm.response.json().users.length).to.be.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Creating Gant charts\",\r\n    \"content\": \"Creating Gant charts to provide visualizations of work progress\",\r\n    \"users\": [ { \"userId\": \"{{userId}}\", \"roles\": [\"developer\"] } ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{projectsURL}}",
							"host": [
								"{{projectsURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET all tasks of the user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is an empty array\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an(\"array\");\r",
									"    pm.expect(response.length).to.be.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{usersURL}}/:id/tasks",
							"host": [
								"{{usersURL}}"
							],
							"path": [
								":id",
								"tasks"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST new task0 completed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a new project task\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.be.eql(\"build server\");\r",
									"    pm.expect(response.content).to.be.eql(\"build a big bad server\");\r",
									"    pm.expect(response.projectId).to.be.eql(pm.collectionVariables.get(\"projectId\"));\r",
									"    pm.expect(response.userIds).to.be.a(\"array\");\r",
									"    pm.expect(response.userIds.length).to.be.eql(1);\r",
									"    pm.expect(response.userIds[0]).to.be.eql(pm.collectionVariables.get(\"userId\"));\r",
									"\r",
									"    pm.collectionVariables.set(\"taskId0\", response._id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"build server\",\r\n    \"content\": \"build a big bad server\",\r\n    \"userIds\": \"{{userId}}\",\r\n    \"completed\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{projectsURL}}/:id/tasks",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id",
								"tasks"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST new task1 incomplete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a new project task\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.be.eql(\"test server\");\r",
									"    pm.expect(response.content).to.be.eql(\"test the weak af server\");\r",
									"    pm.expect(response.projectId).to.be.eql(pm.collectionVariables.get(\"projectId\"));\r",
									"    pm.expect(response.userIds).to.be.a(\"array\");\r",
									"    pm.expect(response.userIds.length).to.be.eql(1);\r",
									"    pm.expect(response.userIds[0]).to.be.eql(pm.collectionVariables.get(\"userId\"));\r",
									"\r",
									"    pm.collectionVariables.set(\"taskId1\", response._id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"test server\",\r\n    \"content\": \"test the weak af server\",\r\n    \"userIds\": \"{{userId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{projectsURL}}/:id/tasks",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id",
								"tasks"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET all tasks of the user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is an array with 2 elements\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an(\"array\");\r",
									"    pm.expect(response.length).to.be.eql(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{usersURL}}/:id/tasks",
							"host": [
								"{{usersURL}}"
							],
							"path": [
								":id",
								"tasks"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET incomplete tasks of user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is an array with the incomplete element\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an(\"array\");\r",
									"    \r",
									"    pm.expect(response).to.include(pm.collectionVariables.get(\"taskId1\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{usersURL}}/:id/tasks/incomplete",
							"host": [
								"{{usersURL}}"
							],
							"path": [
								":id",
								"tasks",
								"incomplete"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET completed tasks of user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is an array with the completed element\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an(\"array\");\r",
									"    \r",
									"    pm.expect(response).to.include(pm.collectionVariables.get(\"taskId0\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{usersURL}}/:id/tasks/completed",
							"host": [
								"{{usersURL}}"
							],
							"path": [
								":id",
								"tasks",
								"completed"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE test project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{projectsURL}}/:id",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET all tasks of the user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is an empty array\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an(\"array\");\r",
									"    pm.expect(response.length).to.be.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{usersURL}}/:id/tasks",
							"host": [
								"{{usersURL}}"
							],
							"path": [
								":id",
								"tasks"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{usersURL}}/:id",
							"host": [
								"{{usersURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/projects",
			"item": [
				{
					"name": "POST test user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response has all properties\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.eql(\"new user\");\r",
									"    pm.expect(response.pass).to.eql(\"218218\");\r",
									"    pm.expect(response.projectIds).to.eql([]);\r",
									"    pm.expect(response.taskIds).to.eql([]);\r",
									"    \r",
									"    pm.collectionVariables.set(\"userId\", response._id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"new user\",\r\n    \"pass\": \"218218\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{usersURL}}",
							"host": [
								"{{usersURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET all projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is an array\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an(\"array\");\r",
									"\r",
									"    pm.collectionVariables.set(\"initArrayLen\", response.length);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{projectsURL}}",
							"host": [
								"{{projectsURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST a new project0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response has all project properties\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.be.eql(\"Creating Gant charts\");\r",
									"    pm.expect(response.content).to.be.eql(\"Creating Gant charts to provide visualizations of work progress\");\r",
									"    pm.expect(response.dayStart).to.be.a(\"string\");\r",
									"    pm.expect(response.budget).to.be.a(\"number\");\r",
									"    pm.expect(response.completed).to.be.a(\"boolean\");\r",
									"    pm.expect(response.users).to.be.an(\"array\");\r",
									"    pm.expect(response.taskIds).to.be.an(\"array\");\r",
									"    \r",
									"    pm.collectionVariables.set(\"projectId0\", response._id);\r",
									"});\r",
									"\r",
									"pm.test(\"The response have the user\", function() {\r",
									"    pm.expect(pm.response.json().users.length).to.be.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Creating Gant charts\",\r\n    \"content\": \"Creating Gant charts to provide visualizations of work progress\",\r\n    \"users\": [ { \"userId\": \"{{userId}}\", \"roles\": [\"developer\"] } ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{projectsURL}}",
							"host": [
								"{{projectsURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "NOT POST new project without id in user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Creating Gant charts\",\r\n    \"content\": \"Creating Gant charts to provide visualizations of work progress\",\r\n    \"users\": [ { \"roles\": [\"developer\"] } ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{projectsURL}}",
							"host": [
								"{{projectsURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST new project1 without incorrect user id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response has all project properties\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.be.eql(\"Creating Gant charts\");\r",
									"    pm.expect(response.content).to.be.eql(\"Creating Gant charts to provide visualizations of work progress\");\r",
									"    pm.expect(response.dayStart).to.be.a(\"string\");\r",
									"    pm.expect(response.budget).to.be.a(\"number\");\r",
									"    pm.expect(response.completed).to.be.a(\"boolean\");\r",
									"    pm.expect(response.users).to.be.an(\"array\");\r",
									"    pm.expect(response.taskIds).to.be.an(\"array\");\r",
									"    \r",
									"    pm.collectionVariables.set(\"projectId1\", response._id);\r",
									"});\r",
									"\r",
									"pm.test(\"The response don't have the incorrect user\", function() {\r",
									"    pm.expect(pm.response.json().users.length).to.be.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Creating Gant charts\",\r\n    \"content\": \"Creating Gant charts to provide visualizations of work progress\",\r\n    \"users\": [ { \"userId\": \"{{incorrectId}}\", \"roles\": [\"developer\"] } ],\r\n    \"completed\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{projectsURL}}",
							"host": [
								"{{projectsURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET all projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is an array\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an(\"array\");\r",
									"\r",
									"    const initLength = pm.collectionVariables.get(\"initArrayLen\");\r",
									"    pm.expect(response.length).to.be.eql(initLength + 2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{projectsURL}}",
							"host": [
								"{{projectsURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET all incomplete projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is full of completed projects\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an(\"array\");\r",
									"    for(let i = 0; i < response.length; i++) {\r",
									"        pm.expect(response[i].completed).to.be.eql(false);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{projectsURL}}/incomplete",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								"incomplete"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET all completed projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is full of completed projects\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an(\"array\");\r",
									"    for(let i = 0; i < response.length; i++) {\r",
									"        pm.expect(response[i].completed).to.be.eql(true);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{projectsURL}}/completed",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								"completed"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET a project given id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response has all project properties\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.be.a(\"string\");\r",
									"    pm.expect(response.content).to.be.a(\"string\");\r",
									"    pm.expect(response.dayStart).to.be.a(\"string\");\r",
									"    pm.expect(response.budget).to.be.a(\"number\");\r",
									"    pm.expect(response.completed).to.be.a(\"boolean\");\r",
									"    pm.expect(response.users).to.be.an(\"array\");\r",
									"    pm.expect(response.taskIds).to.be.an(\"array\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{projectsURL}}/:id",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NOT GET project given incorrectId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{projectsURL}}/:id",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{incorrectId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST new task to project0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a new project task\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.be.eql(\"test server\");\r",
									"    pm.expect(response.content).to.be.eql(\"test the weak af server\");\r",
									"    pm.expect(response.projectId).to.be.eql(pm.collectionVariables.get(\"projectId0\"));\r",
									"    pm.expect(response.userIds).to.be.a(\"array\");\r",
									"    pm.expect(response.userIds.length).to.be.eql(1);\r",
									"    pm.expect(response.userIds[0]).to.be.eql(pm.collectionVariables.get(\"userId\"));\r",
									"\r",
									"    pm.collectionVariables.set(\"taskId\", response._id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"test server\",\r\n    \"content\": \"test the weak af server\",\r\n    \"userIds\": \"{{userId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{projectsURL}}/:id/tasks",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id",
								"tasks"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT a project given id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response has all project properties\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.be.a(\"string\");\r",
									"    pm.expect(response.content).to.be.a(\"string\");\r",
									"    pm.expect(response.dayStart).to.be.a(\"string\");\r",
									"    pm.expect(response.budget).to.be.a(\"number\");\r",
									"    pm.expect(response.completed).to.be.a(\"boolean\");\r",
									"    pm.expect(response.users).to.be.an(\"array\");\r",
									"    pm.expect(response.taskIds).to.be.an(\"array\");\r",
									"    \r",
									"    pm.collectionVariables.set(\"projectId\", response._id);\r",
									"});\r",
									"\r",
									"pm.test(\"The response has the change\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.be.eql(\"Building task managing server\");\r",
									"    pm.expect(response.content).to.be.eql(\"Building a complete task managing server\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Building task managing server\",\r\n    \"content\": \"Building a complete task managing server\",\r\n    \"completed\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{projectsURL}}/:id",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET test task completed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a completed task\", function() {\r",
									"    pm.expect(pm.response.json().completed).to.be.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{tasksURL}}/:id",
							"host": [
								"{{tasksURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{taskId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NOT PUT project with taskIds change",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Building task managing server\",\r\n    \"content\": \"Building a complete task managing server\",\r\n    \"taskIds\": [ \"some taskId\" ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{projectsURL}}/:id",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE a project given id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{projectsURL}}/:id",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NOT GET deleted test task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{tasksURL}}/:id",
							"host": [
								"{{tasksURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{taskId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE a project given id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{projectsURL}}/:id",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE test user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{usersURL}}/:id",
							"host": [
								"{{usersURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "projects/:id/users",
			"item": [
				{
					"name": "POST test user0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response has all properties\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.eql(\"new user 0\");\r",
									"    pm.expect(response.pass).to.eql(\"218218\");\r",
									"    pm.expect(response.projectIds).to.eql([]);\r",
									"    pm.expect(response.taskIds).to.eql([]);\r",
									"    \r",
									"    pm.collectionVariables.set(\"userId0\", response._id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"new user 0\",\r\n    \"pass\": \"218218\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{usersURL}}",
							"host": [
								"{{usersURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST test user1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response has all properties\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.eql(\"new user 1\");\r",
									"    pm.expect(response.pass).to.eql(\"218218\");\r",
									"    pm.expect(response.projectIds).to.eql([]);\r",
									"    pm.expect(response.taskIds).to.eql([]);\r",
									"    \r",
									"    pm.collectionVariables.set(\"userId1\", response._id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"new user 1\",\r\n    \"pass\": \"218218\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{usersURL}}",
							"host": [
								"{{usersURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST a new project with user0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response has all project properties\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.be.eql(\"Creating Gant charts\");\r",
									"    pm.expect(response.content).to.be.eql(\"Creating Gant charts to provide visualizations of work progress\");\r",
									"    pm.expect(response.dayStart).to.be.a(\"string\");\r",
									"    pm.expect(response.budget).to.be.a(\"number\");\r",
									"    pm.expect(response.completed).to.be.a(\"boolean\");\r",
									"    pm.expect(response.users).to.be.an(\"array\");\r",
									"    pm.expect(response.taskIds).to.be.an(\"array\");\r",
									"    \r",
									"    pm.collectionVariables.set(\"projectId\", response._id);\r",
									"});\r",
									"\r",
									"pm.test(\"The response have the user\", function() {\r",
									"    pm.expect(pm.response.json().users.length).to.be.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Creating Gant charts\",\r\n    \"content\": \"Creating Gant charts to provide visualizations of work progress\",\r\n    \"users\": [ { \"userId\": \"{{userId0}}\", \"roles\": [\"developer\"] } ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{projectsURL}}",
							"host": [
								"{{projectsURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST test task0 to project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a new project task\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.be.eql(\"test server\");\r",
									"    pm.expect(response.content).to.be.eql(\"test the weak af server\");\r",
									"    pm.expect(response.projectId).to.be.eql(pm.collectionVariables.get(\"projectId\"));\r",
									"    pm.expect(response.userIds).to.be.a(\"array\");\r",
									"    pm.expect(response.userIds.length).to.be.eql(0);\r",
									"\r",
									"    pm.collectionVariables.set(\"taskId0\", response._id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"test server\",\r\n    \"content\": \"test the weak af server\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{projectsURL}}/:id/tasks",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id",
								"tasks"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST a new project user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a new project user\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.userId).to.be.eql(pm.collectionVariables.get(\"userId1\"));\r",
									"    pm.expect(response.roles).to.be.a(\"array\");\r",
									"    pm.expect(response.roles.length).to.be.eql(1);\r",
									"    pm.expect(response.taskIds).to.be.a(\"array\");\r",
									"    pm.expect(response.taskIds.length).to.be.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": \"{{userId1}}\",\r\n    \"roles\": [\"tester\"],\r\n    \"taskIds\": [\"{{taskId0}}\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{projectsURL}}/:id/users",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id",
								"users"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET user1 with project and task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response has all properties in right format\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.be.a(\"string\");\r",
									"    pm.expect(response.pass).to.be.a(\"string\");\r",
									"    pm.expect(response.DOB).to.be.a(\"string\");\r",
									"    pm.expect(response.projectIds).to.be.an(\"array\");\r",
									"    pm.expect(response.taskIds).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"The response have the projectId and taskId0\", function() {\r",
									"    const projectId = pm.collectionVariables.get(\"projectId\");\r",
									"    const taskId = pm.collectionVariables.get(\"taskId0\");\r",
									"    pm.expect(pm.response.json().projectIds).to.include(projectId);\r",
									"    pm.expect(pm.response.json().taskIds).to.include(taskId);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{usersURL}}/:id",
							"host": [
								"{{usersURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NOT POST new project user without userId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roles\": [\"tester\"],\r\n    \"taskIds\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{projectsURL}}/:id/users",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id",
								"users"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST but update existing user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a new project user\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.userId).to.be.eql(pm.collectionVariables.get(\"userId0\"));\r",
									"    pm.expect(response.roles).to.be.a(\"array\");\r",
									"    pm.expect(response.roles.length).to.be.eql(2);\r",
									"    pm.expect(response.taskIds).to.be.eql([]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": \"{{userId0}}\",\r\n    \"roles\": [\"tester\"],\r\n    \"taskIds\": [\"{{incorrectId}}\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{projectsURL}}/:id/users",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id",
								"users"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET all users of the project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is an array\", function() {\r",
									"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{projectsURL}}/:id/users",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id",
								"users"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NOT GET a project user given index of out range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{projectsURL}}/:id/users/:index",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id",
								"users",
								":index"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								},
								{
									"key": "index",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET a project user given index",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is an array\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.userId).to.be.a(\"string\");\r",
									"    pm.expect(response.roles).to.be.a(\"array\");\r",
									"    pm.expect(response.taskIds).to.be.an(\"array\");\r",
									"    pm.expect(response.taskIds.length).to.be.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{projectsURL}}/:id/users/:index",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id",
								"users",
								":index"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								},
								{
									"key": "index",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET a project user given index",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is an array\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.userId).to.be.a(\"string\");\r",
									"    pm.expect(response.roles).to.be.a(\"array\");\r",
									"    pm.expect(response.taskIds).to.be.an(\"array\");\r",
									"    pm.expect(response.taskIds.length).to.be.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{projectsURL}}/:id/users/:index",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id",
								"users",
								":index"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								},
								{
									"key": "index",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST test task1 to project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a new project task\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.be.eql(\"fix server\");\r",
									"    pm.expect(response.content).to.be.eql(\"fix the weak af server\");\r",
									"    pm.expect(response.projectId).to.be.eql(pm.collectionVariables.get(\"projectId\"));\r",
									"    pm.expect(response.userIds).to.be.a(\"array\");\r",
									"    pm.expect(response.userIds.length).to.be.eql(0);\r",
									"\r",
									"    pm.collectionVariables.set(\"taskId1\", response._id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"fix server\",\r\n    \"content\": \"fix the weak af server\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{projectsURL}}/:id/tasks",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id",
								"tasks"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT a project user given index",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is an array\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.userId).to.be.a(\"string\");\r",
									"    pm.expect(response.roles).to.be.a(\"array\");\r",
									"    pm.expect(response.taskIds).to.be.an(\"array\");\r",
									"    pm.expect(response.taskIds.length).to.be.eql(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roles\": [\"project manager\"],\r\n    \"taskIds\": [\"{{taskId0}}\", \"{{taskId1}}\", \"{{incorrectId}}\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{projectsURL}}/:id/users/:index",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id",
								"users",
								":index"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								},
								{
									"key": "index",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NOT PUT a project user with userId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": \"{{userId}}\",\r\n    \"roles\": [\"task manager\"],\r\n    \"taskIds\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{projectsURL}}/:id/users/:index",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id",
								"users",
								":index"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								},
								{
									"key": "index",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NOT PUT a project user given index out of range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roles\": [\"task manager\"],\r\n    \"taskIds\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{projectsURL}}/:id/users/:index",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id",
								"users",
								":index"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								},
								{
									"key": "index",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET a project user given index",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is an array\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.userId).to.be.a(\"string\");\r",
									"    pm.expect(response.roles).to.be.a(\"array\");\r",
									"    pm.expect(response.taskIds).to.be.an(\"array\");\r",
									"    pm.expect(response.taskIds.length).to.be.eql(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{projectsURL}}/:id/users/:index",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id",
								"users",
								":index"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								},
								{
									"key": "index",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET task0 with user1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is an array\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.userIds).to.include(pm.collectionVariables.get(\"userId1\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{tasksURL}}/:id",
							"host": [
								"{{tasksURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{taskId0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET task1 with user1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is an array\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.userIds).to.include(pm.collectionVariables.get(\"userId1\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{tasksURL}}/:id",
							"host": [
								"{{tasksURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{taskId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE a project user given index",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{projectsURL}}/:id/users/:index",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id",
								"users",
								":index"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								},
								{
									"key": "index",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET user1 without project or task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response has all properties in right format\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.be.a(\"string\");\r",
									"    pm.expect(response.pass).to.be.a(\"string\");\r",
									"    pm.expect(response.DOB).to.be.a(\"string\");\r",
									"    pm.expect(response.projectIds).to.be.an(\"array\");\r",
									"    pm.expect(response.taskIds).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"The response don't have the previous projectId\", function() {\r",
									"    const prevProjectId = pm.collectionVariables.get(\"projectId\");\r",
									"    const prevTaskId = pm.collectionVariables.get(\"taskId\");\r",
									"    pm.expect(pm.response.json().projectIds).to.not.include(prevProjectId);\r",
									"    pm.expect(pm.response.json().taskIds).to.not.include(prevTaskId);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{usersURL}}/:id",
							"host": [
								"{{usersURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET test task0 without user1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response does not include user1\", function() {\r",
									"    const userId1 = pm.collectionVariables.get(\"userId1\")\r",
									"    pm.expect(pm.response.json().userIds).to.not.include(userId1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{tasksURL}}/:id",
							"host": [
								"{{tasksURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{taskId0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET test task1 without user1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response does not include user1\", function() {\r",
									"    const userId1 = pm.collectionVariables.get(\"userId1\")\r",
									"    pm.expect(pm.response.json().userIds).to.not.include(userId1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{tasksURL}}/:id",
							"host": [
								"{{tasksURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{taskId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET user0 with project id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response has all properties in right format\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.be.a(\"string\");\r",
									"    pm.expect(response.pass).to.be.a(\"string\");\r",
									"    pm.expect(response.DOB).to.be.a(\"string\");\r",
									"    pm.expect(response.projectIds).to.be.an(\"array\");\r",
									"    pm.expect(response.taskIds).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"The response have the previous projectId\", function() {\r",
									"    const prevProjectId = pm.collectionVariables.get(\"projectId\");\r",
									"    pm.expect(pm.response.json().projectIds).to.include(prevProjectId);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{usersURL}}/:id",
							"host": [
								"{{usersURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE the project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{projectsURL}}/:id",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET user0 without project id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response has all properties in right format\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.be.a(\"string\");\r",
									"    pm.expect(response.pass).to.be.a(\"string\");\r",
									"    pm.expect(response.DOB).to.be.a(\"string\");\r",
									"    pm.expect(response.projectIds).to.be.an(\"array\");\r",
									"    pm.expect(response.taskIds).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"The response don't have the previous projectId\", function() {\r",
									"    const prevProjectId = pm.collectionVariables.get(\"projectId\");\r",
									"    pm.expect(pm.response.json().projectIds).to.not.include(prevProjectId);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{usersURL}}/:id",
							"host": [
								"{{usersURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE user0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{usersURL}}/:id",
							"host": [
								"{{usersURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE user1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{usersURL}}/:id",
							"host": [
								"{{usersURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId1}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/projects/:id/tasks",
			"item": [
				{
					"name": "POST test user0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response has all properties\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.eql(\"new user 0\");\r",
									"    pm.expect(response.pass).to.eql(\"218218\");\r",
									"    pm.expect(response.projectIds).to.eql([]);\r",
									"    pm.expect(response.taskIds).to.eql([]);\r",
									"    \r",
									"    pm.collectionVariables.set(\"userId0\", response._id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"new user 0\",\r\n    \"pass\": \"218218\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{usersURL}}",
							"host": [
								"{{usersURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST test user1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response has all properties\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.eql(\"new user 1\");\r",
									"    pm.expect(response.pass).to.eql(\"218218\");\r",
									"    pm.expect(response.projectIds).to.eql([]);\r",
									"    pm.expect(response.taskIds).to.eql([]);\r",
									"    \r",
									"    pm.collectionVariables.set(\"userId1\", response._id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"new user 1\",\r\n    \"pass\": \"218218\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{usersURL}}",
							"host": [
								"{{usersURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST project with user0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response has all project properties\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.be.eql(\"Creating Gant charts\");\r",
									"    pm.expect(response.content).to.be.eql(\"Creating Gant charts to provide visualizations of work progress\");\r",
									"    pm.expect(response.dayStart).to.be.a(\"string\");\r",
									"    pm.expect(response.budget).to.be.a(\"number\");\r",
									"    pm.expect(response.completed).to.be.a(\"boolean\");\r",
									"    pm.expect(response.users).to.be.an(\"array\");\r",
									"    pm.expect(response.taskIds).to.be.an(\"array\");\r",
									"    \r",
									"    pm.collectionVariables.set(\"projectId\", response._id);\r",
									"});\r",
									"\r",
									"pm.test(\"The response have the user\", function() {\r",
									"    pm.expect(pm.response.json().users.length).to.be.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Creating Gant charts\",\r\n    \"content\": \"Creating Gant charts to provide visualizations of work progress\",\r\n    \"users\": [ { \"userId\": \"{{userId0}}\", \"roles\": [\"developer\"] } ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{projectsURL}}",
							"host": [
								"{{projectsURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET all tasks of the project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is an array\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an(\"array\");\r",
									"    pm.collectionVariables.set(\"initArrayLen\", response.length);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{projectsURL}}/:id/tasks",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id",
								"tasks"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST new task0 completed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a new project task\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.be.eql(\"build server\");\r",
									"    pm.expect(response.content).to.be.eql(\"build a big bad server\");\r",
									"    pm.expect(response.projectId).to.be.eql(pm.collectionVariables.get(\"projectId\"));\r",
									"    pm.expect(response.userIds).to.be.a(\"array\");\r",
									"    pm.expect(response.userIds.length).to.be.eql(1);\r",
									"    pm.expect(response.userIds[0]).to.be.eql(pm.collectionVariables.get(\"userId0\"));\r",
									"\r",
									"    pm.collectionVariables.set(\"taskId0\", response._id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"build server\",\r\n    \"content\": \"build a big bad server\",\r\n    \"userIds\": [\"{{userId0}}\"],\r\n    \"completed\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{projectsURL}}/:id/tasks",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id",
								"tasks"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST new task1 incomplete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a new project task\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.be.eql(\"test server\");\r",
									"    pm.expect(response.content).to.be.eql(\"test the weak af server\");\r",
									"    pm.expect(response.projectId).to.be.eql(pm.collectionVariables.get(\"projectId\"));\r",
									"    pm.expect(response.userIds).to.be.a(\"array\");\r",
									"    pm.expect(response.userIds.length).to.be.eql(1);\r",
									"    pm.expect(response.userIds[0]).to.be.eql(pm.collectionVariables.get(\"userId0\"));\r",
									"\r",
									"    pm.collectionVariables.set(\"taskId1\", response._id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"test server\",\r\n    \"content\": \"test the weak af server\",\r\n    \"userIds\": [\"{{userId0}}\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{projectsURL}}/:id/tasks",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id",
								"tasks"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET all tasks of the project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is an array with one element\", function() {\r",
									"    const response = pm.response.json();\r",
									"    const initArrayLen = pm.collectionVariables.get(\"initArrayLen\");\r",
									"    pm.expect(response).to.be.an(\"array\");\r",
									"    pm.expect(response.length).to.be.eql(initArrayLen + 2);\r",
									"    pm.expect(response).to.be.include(pm.collectionVariables.get(\"taskId0\"));\r",
									"    pm.expect(response).to.be.include(pm.collectionVariables.get(\"taskId1\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{projectsURL}}/:id/tasks",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id",
								"tasks"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET user with task id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response has all properties in right format\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.be.a(\"string\");\r",
									"    pm.expect(response.pass).to.be.a(\"string\");\r",
									"    pm.expect(response.DOB).to.be.a(\"string\");\r",
									"    pm.expect(response.projectIds).to.be.an(\"array\");\r",
									"    pm.expect(response.taskIds).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"The response have 2 taskIds\", function() {\r",
									"    const taskIds = pm.response.json().taskIds;\r",
									"    pm.expect(taskIds.length).to.be.eql(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{usersURL}}/:id",
							"host": [
								"{{usersURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET incomplete tasks of project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is an array with the incomplete element\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an(\"array\");\r",
									"\r",
									"    pm.expect(response).to.include(pm.collectionVariables.get(\"taskId1\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{projectsURL}}/:id/tasks/incomplete",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id",
								"tasks",
								"incomplete"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET completed tasks of project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is an array with the completed element\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an(\"array\");\r",
									"    \r",
									"    pm.expect(response).to.include(pm.collectionVariables.get(\"taskId0\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{projectsURL}}/:id/tasks/completed",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id",
								"tasks",
								"completed"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET a task given id in the project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a task\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response._id).to.be.eql(pm.collectionVariables.get(\"taskId1\"));\r",
									"    pm.expect(response.name).to.be.eql(\"test server\");\r",
									"    pm.expect(response.content).to.be.eql(\"test the weak af server\");\r",
									"    pm.expect(response.completed).to.be.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{projectsURL}}/:id/tasks/:index",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id",
								"tasks",
								":index"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								},
								{
									"key": "index",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NOT GET task given incorrect id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{projectsURL}}/:id/tasks/:index",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id",
								"tasks",
								":index"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								},
								{
									"key": "index",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT a task given id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a task\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(response._id).to.be.eql(pm.collectionVariables.get(\"taskId0\"));\r",
									"    pm.expect(response.name).to.be.eql(\"build server\");\r",
									"    pm.expect(response.content).to.be.eql(\"build the weak af server\");\r",
									"    pm.expect(response.completed).to.be.eql(true);\r",
									"    pm.expect(response.score).to.be.eql(100);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"build the weak af server\",\r\n    \"score\": 100\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{projectsURL}}/:id/tasks/:index",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id",
								"tasks",
								":index"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								},
								{
									"key": "index",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET all users of the project without user1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response doesn't include user1\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an(\"array\");\r",
									"    pm.expect(response.length).to.be.eql(1);\r",
									"    pm.expect(response).to.not.include(pm.collectionVariables.get(\"userId1\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{projectsURL}}/:id/users",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id",
								"users"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT a task with new user1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a task\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(response._id).to.be.eql(pm.collectionVariables.get(\"taskId1\"));\r",
									"    pm.expect(response.name).to.be.eql(\"test server\");\r",
									"    pm.expect(response.content).to.be.eql(\"test the weak af server\");\r",
									"    pm.expect(response.completed).to.be.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"test the weak af server\",\r\n    \"userIds\": [\"{{userId1}}\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{projectsURL}}/:id/tasks/:index",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id",
								"tasks",
								":index"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								},
								{
									"key": "index",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET all users of the project with user1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response include user1\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an(\"array\");\r",
									"    pm.expect(response.length).to.be.eql(2);\r",
									"    pm.expect(response[1].userId).to.be.eql(pm.collectionVariables.get(\"userId1\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{projectsURL}}/:id/users",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id",
								"users"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NOT PUT a task with new projectId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"projectId\": \"{{incorrectId}}\",\r\n    \"content\": \"test the weak af server\",\r\n    \"userIds\": [\"{{userId1}}\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{projectsURL}}/:id/tasks/:index",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id",
								"tasks",
								":index"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								},
								{
									"key": "index",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE a task given index",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{projectsURL}}/:id/tasks/:index",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id",
								"tasks",
								":index"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								},
								{
									"key": "index",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET user0 without task id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response has all properties in right format\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.be.a(\"string\");\r",
									"    pm.expect(response.pass).to.be.a(\"string\");\r",
									"    pm.expect(response.DOB).to.be.a(\"string\");\r",
									"    pm.expect(response.projectIds).to.be.an(\"array\");\r",
									"    pm.expect(response.taskIds).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"The response have the projectId but not the taskId\", function() {\r",
									"    const response = pm.response.json();\r",
									"    const taskId = pm.collectionVariables.get(\"taskId0\");\r",
									"    const projectId = pm.collectionVariables.get(\"projectId\");\r",
									"    pm.expect(response.taskIds).to.not.include(taskId);\r",
									"    pm.expect(response.projectIds).to.include(projectId);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{usersURL}}/:id",
							"host": [
								"{{usersURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET all users of the project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response include both users\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an(\"array\");\r",
									"    pm.expect(response.length).to.be.eql(2);\r",
									"    pm.expect(response[0].userId).to.be.eql(pm.collectionVariables.get(\"userId0\"));\r",
									"    pm.expect(response[1].userId).to.be.eql(pm.collectionVariables.get(\"userId1\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{projectsURL}}/:id/users",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id",
								"users"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET all tasks of the project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is an array with one more element\", function() {\r",
									"    const response = pm.response.json();\r",
									"    const initArrayLen = pm.collectionVariables.get(\"initArrayLen\");\r",
									"    pm.expect(response).to.be.an(\"array\");\r",
									"    pm.expect(response.length).to.be.eql(initArrayLen + 1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{projectsURL}}/:id/tasks",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id",
								"tasks"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE the project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{projectsURL}}/:id",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET user1 without task id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response has all properties in right format\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.be.a(\"string\");\r",
									"    pm.expect(response.pass).to.be.a(\"string\");\r",
									"    pm.expect(response.DOB).to.be.a(\"string\");\r",
									"    pm.expect(response.projectIds).to.be.an(\"array\");\r",
									"    pm.expect(response.taskIds).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"The response have the taskId\", function() {\r",
									"    const response = pm.response.json();\r",
									"    const taskId = pm.collectionVariables.get(\"taskId1\");\r",
									"    const projectId = pm.collectionVariables.get(\"projectId\");\r",
									"    pm.expect(response.taskIds).to.not.include(taskId);\r",
									"    pm.expect(response.projectIds).to.not.include(projectId);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{usersURL}}/:id",
							"host": [
								"{{usersURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE user0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{usersURL}}/:id",
							"host": [
								"{{usersURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE user1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{usersURL}}/:id",
							"host": [
								"{{usersURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId1}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/tasks",
			"item": [
				{
					"name": "POST test user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response has all properties\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.eql(\"new user\");\r",
									"    pm.expect(response.pass).to.eql(\"218218\");\r",
									"    pm.expect(response.projectIds).to.eql([]);\r",
									"    pm.expect(response.taskIds).to.eql([]);\r",
									"    \r",
									"    pm.collectionVariables.set(\"userId\", response._id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"new user\",\r\n    \"pass\": \"218218\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{usersURL}}",
							"host": [
								"{{usersURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST project with test user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response has all project properties\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.be.eql(\"Creating Gant charts\");\r",
									"    pm.expect(response.content).to.be.eql(\"Creating Gant charts to provide visualizations of work progress\");\r",
									"    pm.expect(response.dayStart).to.be.a(\"string\");\r",
									"    pm.expect(response.budget).to.be.a(\"number\");\r",
									"    pm.expect(response.completed).to.be.a(\"boolean\");\r",
									"    pm.expect(response.users).to.be.an(\"array\");\r",
									"    pm.expect(response.taskIds).to.be.an(\"array\");\r",
									"    \r",
									"    pm.collectionVariables.set(\"projectId\", response._id);\r",
									"});\r",
									"\r",
									"pm.test(\"The response have the user\", function() {\r",
									"    pm.expect(pm.response.json().users.length).to.be.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Creating Gant charts\",\r\n    \"content\": \"Creating Gant charts to provide visualizations of work progress\",\r\n    \"users\": [ { \"userId\": \"{{userId}}\", \"roles\": [\"developer\"] } ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{projectsURL}}",
							"host": [
								"{{projectsURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET all tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is an array\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an(\"array\");\r",
									"    pm.collectionVariables.set(\"initArrayLen\", response.length);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{tasksURL}}",
							"host": [
								"{{tasksURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST new task0 completed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a new project task\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.be.eql(\"build server\");\r",
									"    pm.expect(response.content).to.be.eql(\"build a big bad server\");\r",
									"    pm.expect(response.projectId).to.be.eql(pm.collectionVariables.get(\"projectId\"));\r",
									"    pm.expect(response.userIds).to.be.a(\"array\");\r",
									"    pm.expect(response.userIds.length).to.be.eql(1);\r",
									"    pm.expect(response.userIds[0]).to.be.eql(pm.collectionVariables.get(\"userId\"));\r",
									"\r",
									"    pm.collectionVariables.set(\"taskId0\", response._id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"build server\",\r\n    \"content\": \"build a big bad server\",\r\n    \"userIds\": \"{{userId}}\",\r\n    \"completed\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{projectsURL}}/:id/tasks",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id",
								"tasks"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST new task1 incomplete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a new project task\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.be.eql(\"test server\");\r",
									"    pm.expect(response.content).to.be.eql(\"test the weak af server\");\r",
									"    pm.expect(response.projectId).to.be.eql(pm.collectionVariables.get(\"projectId\"));\r",
									"    pm.expect(response.userIds).to.be.a(\"array\");\r",
									"    pm.expect(response.userIds.length).to.be.eql(1);\r",
									"    pm.expect(response.userIds[0]).to.be.eql(pm.collectionVariables.get(\"userId\"));\r",
									"\r",
									"    pm.collectionVariables.set(\"taskId1\", response._id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"test server\",\r\n    \"content\": \"test the weak af server\",\r\n    \"userIds\": \"{{userId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{projectsURL}}/:id/tasks",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id",
								"tasks"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET all tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is an array with one element\", function() {\r",
									"    const response = pm.response.json();\r",
									"    const initArrayLen = pm.collectionVariables.get(\"initArrayLen\");\r",
									"    pm.expect(response).to.be.an(\"array\");\r",
									"    pm.expect(response.length).to.be.eql(initArrayLen + 2);\r",
									"    pm.expect(response[0]._id).to.be.eql(pm.collectionVariables.get(\"taskId0\"));\r",
									"    pm.expect(response[1]._id).to.be.eql(pm.collectionVariables.get(\"taskId1\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{tasksURL}}",
							"host": [
								"{{tasksURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET user with task id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response has all properties in right format\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.be.a(\"string\");\r",
									"    pm.expect(response.pass).to.be.a(\"string\");\r",
									"    pm.expect(response.DOB).to.be.a(\"string\");\r",
									"    pm.expect(response.projectIds).to.be.an(\"array\");\r",
									"    pm.expect(response.taskIds).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"The response have 2 taskIds\", function() {\r",
									"    const taskIds = pm.response.json().taskIds;\r",
									"    pm.expect(taskIds.length).to.be.eql(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{usersURL}}/:id",
							"host": [
								"{{usersURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET incomplete tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is an array with the incomplete element\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an(\"array\");\r",
									"    pm.expect(response.length).to.be.eql(1);\r",
									"    pm.expect(response[0]._id).to.be.eql(pm.collectionVariables.get(\"taskId1\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{tasksURL}}/incomplete",
							"host": [
								"{{tasksURL}}"
							],
							"path": [
								"incomplete"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET completed tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is an array with the completed element\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an(\"array\");\r",
									"    pm.expect(response.length).to.be.eql(1);\r",
									"    pm.expect(response[0]._id).to.be.eql(pm.collectionVariables.get(\"taskId0\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{tasksURL}}/completed",
							"host": [
								"{{tasksURL}}"
							],
							"path": [
								"completed"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET a task given id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a task\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response._id).to.be.eql(pm.collectionVariables.get(\"taskId1\"));\r",
									"    pm.expect(response.name).to.be.eql(\"test server\");\r",
									"    pm.expect(response.content).to.be.eql(\"test the weak af server\");\r",
									"    pm.expect(response.completed).to.be.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{tasksURL}}/:id",
							"host": [
								"{{tasksURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{taskId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NOT GET a task given incorrect id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{tasksURL}}/:id",
							"host": [
								"{{tasksURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{incorrectId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE the project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{projectsURL}}/:id",
							"host": [
								"{{projectsURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET all tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is an empty array\", function() {\r",
									"    const response = pm.response.json();\r",
									"    const initArrayLen = pm.collectionVariables.get(\"initArrayLen\");\r",
									"    pm.expect(response).to.be.an(\"array\");\r",
									"    pm.expect(response.length).to.be.eql(initArrayLen);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{tasksURL}}",
							"host": [
								"{{tasksURL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "NOT GET a task after project delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{tasksURL}}/:id",
							"host": [
								"{{tasksURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{taskId0}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET user without task id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response has all properties in right format\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.be.a(\"string\");\r",
									"    pm.expect(response.pass).to.be.a(\"string\");\r",
									"    pm.expect(response.DOB).to.be.a(\"string\");\r",
									"    pm.expect(response.projectIds).to.be.an(\"array\");\r",
									"    pm.expect(response.taskIds).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"The response have the taskId\", function() {\r",
									"    const taskId = pm.collectionVariables.get(\"taskId\");\r",
									"    pm.expect(pm.response.json().taskIds).to.not.include(taskId);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{usersURL}}/:id",
							"host": [
								"{{usersURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{usersURL}}/:id",
							"host": [
								"{{usersURL}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "localURL",
			"value": "http://localhost:8080"
		},
		{
			"key": "usersURL",
			"value": "http://localhost:8080/users"
		},
		{
			"key": "projectsURL",
			"value": "http://localhost:8080/projects"
		},
		{
			"key": "tasksURL",
			"value": "http://localhost:8080/tasks"
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "projectUserId",
			"value": ""
		},
		{
			"key": "projectId",
			"value": ""
		},
		{
			"key": "userId1",
			"value": ""
		},
		{
			"key": "userId0",
			"value": ""
		},
		{
			"key": "projectId0",
			"value": ""
		},
		{
			"key": "projectId1",
			"value": ""
		},
		{
			"key": "taskId",
			"value": ""
		},
		{
			"key": "taskId0",
			"value": ""
		},
		{
			"key": "taskId1",
			"value": ""
		},
		{
			"key": "initArrayLen",
			"value": ""
		},
		{
			"key": "incorrectId",
			"value": "incorrectvclvcl"
		}
	]
}