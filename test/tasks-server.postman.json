{
	"info": {
		"_postman_id": "06a31c43-1504-482c-a041-13342945a83f",
		"name": "tasks-server",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/users",
			"item": [
				{
					"name": "GET /users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is an array\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an(\"array\");\r",
									"    \r",
									"    if(response.length > 0) {\r",
									"        pm.collectionVariables.set(\"userId\", response[0]._id);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{localURL}}/users",
							"host": [
								"{{localURL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response has all properties\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.eql(\"new user\");\r",
									"    pm.expect(response.pass).to.eql(\"218218\");\r",
									"    pm.expect(response.projectIds).to.eql([]);\r",
									"    pm.expect(response.taskIds).to.eql([]);\r",
									"    \r",
									"    pm.collectionVariables.set(\"userId\", response._id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"new user\",\r\n    \"pass\": \"218218\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localURL}}/users",
							"host": [
								"{{localURL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /users/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response has all properties in right format\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.be.a(\"string\");\r",
									"    pm.expect(response.pass).to.be.a(\"string\");\r",
									"    pm.expect(response.DOB).to.be.a(\"string\");\r",
									"    pm.expect(response.projectIds).to.be.an(\"array\");\r",
									"    pm.expect(response.taskIds).to.be.an(\"array\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{localURL}}/users/:id",
							"host": [
								"{{localURL}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NOT GET /users/:incorrectId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{localURL}}/users/:id",
							"host": [
								"{{localURL}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{incorrectId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /users/:id/projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is an array\", function() {\r",
									"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{localURL}}/users/:id/projects",
							"host": [
								"{{localURL}}"
							],
							"path": [
								"users",
								":id",
								"projects"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /users/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response has new properties\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.eql(\"user updated\");\r",
									"    pm.expect(response.pass).to.eql(\"13579\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"user updated\",\r\n    \"pass\": \"13579\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localURL}}/users/:id",
							"host": [
								"{{localURL}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NOT PUT /users/:incorrectId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"user updated\",\r\n    \"pass\": \"13579\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localURL}}/users/:id",
							"host": [
								"{{localURL}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{incorrectId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NOT PUT /users/:id with projectIds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"user updated\",\r\n    \"pass\": \"13579\",\r\n    \"projectIds\": [\"abdcdnjnjds\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localURL}}/users/:id",
							"host": [
								"{{localURL}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /users/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{localURL}}/users/:id",
							"host": [
								"{{localURL}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/projects",
			"item": [
				{
					"name": "GET /projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response is an array\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an(\"array\");\r",
									"\r",
									"    if(response.length > 0) {\r",
									"        pm.collectionVariables.set(\"projectId\", response[0]._id);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{localURL}}/projects",
							"host": [
								"{{localURL}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response has all project properties\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.be.eql(\"Creating Gant charts\");\r",
									"    pm.expect(response.content).to.be.eql(\"Creating Gant charts to provide visualizations of work progress\");\r",
									"    pm.expect(response.dayStart).to.be.a(\"string\");\r",
									"    pm.expect(response.budget).to.be.a(\"number\");\r",
									"    pm.expect(response.completed).to.be.a(\"boolean\");\r",
									"    pm.expect(response.projectUsers).to.be.an(\"array\");\r",
									"    pm.expect(response.projectUsers.length).to.be.eql(1);\r",
									"    pm.expect(response.taskIds).to.be.an(\"array\");\r",
									"    \r",
									"    pm.collectionVariables.set(\"projectId\", response._id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Creating Gant charts\",\r\n    \"content\": \"Creating Gant charts to provide visualizations of work progress\",\r\n    \"projectUsers\": [ { \"userId\": \"{{userId}}\", \"roles\": [\"developer\"] } ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localURL}}/projects",
							"host": [
								"{{localURL}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "NOT POST /projects without id in users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Creating Gant charts\",\r\n    \"content\": \"Creating Gant charts to provide visualizations of work progress\",\r\n    \"projectUsers\": [ { \"roles\": [\"developer\"] } ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localURL}}/projects",
							"host": [
								"{{localURL}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /projects/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response is a json object\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"The response has all project properties\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.name).to.be.a(\"string\");\r",
									"    pm.expect(response.content).to.be.a(\"string\");\r",
									"    pm.expect(response.dayStart).to.be.a(\"string\");\r",
									"    pm.expect(response.budget).to.be.a(\"number\");\r",
									"    pm.expect(response.completed).to.be.a(\"boolean\");\r",
									"    pm.expect(response.projectUsers).to.be.an(\"array\");\r",
									"    pm.expect(response.taskIds).to.be.an(\"array\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{localURL}}/projects/:id",
							"host": [
								"{{localURL}}"
							],
							"path": [
								"projects",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{projectId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NOT GET /projects/:incorrectId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{localURL}}/projects/:id",
							"host": [
								"{{localURL}}"
							],
							"path": [
								"projects",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{incorrectId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "localURL",
			"value": "http://localhost:8080"
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "projectId",
			"value": ""
		},
		{
			"key": "incorrectId",
			"value": "incorrectvclvcl"
		}
	]
}